class Solution {
public:
    int perimeter = 0;

    void dfs(vector<vector<int>>& grid, int i, int j) {
        // Check if out of bounds or if it's water
        if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] == 0) {
            perimeter++;
            return;
        }
        
        // If the cell is already visited
        if (grid[i][j] == -1) {
            return;
        }
        
        // Mark the cell as visited
        grid[i][j] = -1;

        // Explore all four directions
        dfs(grid, i - 1, j);
        dfs(grid, i + 1, j);
        dfs(grid, i, j - 1);
        dfs(grid, i, j + 1);
    }

    int islandPerimeter(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                // Start DFS from the first land cell found
                if (grid[i][j] == 1) {
                    dfs(grid, i, j);
                    break;
                }
            }
        }
        return perimeter;
    }
};
